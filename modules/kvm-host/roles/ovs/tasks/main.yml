---
# Backup ifcfg file
- name: Backing up ifcfg file for mgmt_nic
  shell: cp /etc/sysconfig/network-scripts/ifcfg-{{mgmt_nic}} /etc/sysconfig/network-scripts/orig-ifcfg-{{mgmt_nic}}
  tags:
    - mgmt_bridge

# Copy ifcfg-em3 file to br0
- name: Convert ifcfg file for bridge config
  shell: mv /etc/sysconfig/network-scripts/ifcfg-{{mgmt_nic}} /etc/sysconfig/network-scripts/ifcfg-br0
  tags:
    - mgmt_bridge

- name: Change device name in ifcfg file
  lineinfile:
    dest: /etc/sysconfig/network-scripts/ifcfg-br0
    regexp: '^DEVICE='
    line: 'DEVICE=br0'
  tags:
    - mgmt_bridge

- name: remove HW address from ifcfg-br0
  lineinfile:
    dest: /etc/sysconfig/network-scripts/ifcfg-br0
    regexp: '^HWADDR='
    state: absent
  tags:
   - mgmt_bridge

# Copy over purged ifcfg-em3 file
- name: Copy ifcfg file for mgmt_nic
  template:
    src: ifcfg-em3.j2
    dest: /etc/sysconfig/network-scripts/ifcfg-{{mgmt_nic}}
  tags:
    - mgmt_bridge

- name: Restart interfaces 
  shell: ifdown {{mgmt_nic}} ; ifup {{mgmt_nic}} ; ifup br0
  tags:
    - mgmt_bridge

# Check to see if all needed interfaces exist
##TODO create module to get ip network info
- name: Check for all needed VLAN-tagged interfaces
  shell: ip link show {{item.value['bond']}}.{{ item.value['vlan'] }}
  with_dict: '{{ vlan_interface }}'
  register: iplink_output
  failed_when: "'does not exist' in iplink_output.stderr"

- name: Backup all bond0.180* files
  copy:
    remote_src: true
    src: "/etc/sysconfig/network-scripts/ifcfg-{{item.value['bond']}}.{{ item.value['vlan'] }}"
    dest:  "/etc/sysconfig/network-scripts/orig-ifcfg-{{item.value['bond']}}.{{ item.value['vlan'] }}"
  with_dict: '{{vlan_interface}}'

- name: update all bond vlans files
  template: 
    src: ifcfg-bond.j2
    dest: /etc/sysconfig/network-scripts/ifcfg-{{item.value['bond']}}.{{ item.value['vlan'] }}
  with_dict: '{{vlan_interface}}'

- name: Copy ifcfg-ovsbr template
  template:
    src: ifcfg-ovsbr.j2
    dest: /etc/sysconfig/network-scripts/ifcfg-ovsbr{{ item.value['vlan'] }}
  with_dict: '{{ vlan_interface }}'

- name: Restart the ovsbr interfaces with new config
  shell: ifdown ovsbr{{ item.value['vlan'] }} && ifup ovsbr{{ item.value['vlan'] }}
  ignore_errors: yes
  with_dict: "{{ vlan_interface }}"

- name: Restart the network bond interfaces with new config
  shell: ifdown {{ item.value['bond'] }}.{{ item.value['vlan'] }} && ifup {{ item.value['bond'] }}.{{ item.value['vlan'] }}
  ignore_errors: yes
  with_dict: "{{ vlan_interface }}"

#- name: Restart the ovsbr interfaces with new config
#  shell: ifdown ovsbr{{ item.value['vlan'] }} && ifup ovsbr{{ item.value['vlan'] }}
#  ignore_errors: yes
#  with_dict: "{{ vlan_interface }}"

- name: check for libvirt networks
  command: virsh net-info lvnet{{ item.value['vlan'] }}
  with_dict:  "{{ vlan_interface }}"
  ignore_errors: true
  register: libvirt_check

- name: Create libvirt network XML files
  template:
    src: lvnet.xml.j2
    dest: /tmp/lvnet{{ item.value['vlan'] }}.xml
  with_dict:  "{{ vlan_interface }}"
  when: libvirt_check|failed

- name: Define libvirt networks on OVS bridges
  command: virsh net-define /tmp/lvnet{{ item.value['vlan']  }}.xml
  with_dict:  "{{ vlan_interface }}"
  when: libvirt_check|failed

- name: Start new libvirt networks
  command: virsh net-start lvnet{{ item.value['vlan']  }}
  with_dict:  "{{ vlan_interface }}"

- name: Enable auto-start for libvirt networks
  command: virsh net-autostart lvnet{{ item.value['vlan']  }}
  with_dict:  "{{ vlan_interface }}"
  when: libvirt_check|failed
