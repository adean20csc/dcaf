---
# This playbook will prepare the staging directories and retrieve the automation resources for the
# autodeploynode. The resources will be staged locally in the /opt/autodeploy/projects/ and
# opt/autodeploy/resources/ directories.

- name: Stage DCAF automation resources on autodeploynode
  gather_facts: true
  hosts: localhost

  tasks:

    - name: Install required support packages
      yum:
        pkg: "{{ item }}"
        state: present
      with_items: "{{ autodeploy_support_pkgs }}"
      tags: pkgs

    - name: Create the staging directories in /opt/autodeploy
      file:
        path: "{{ item }}"
        state: directory
      with_items:
        - "{{ projects_base_path }}"
        - "{{ resources_base_path }}"
      tags: paths

    - name: Create the resource directories in the staging directories
      file:
        path: "{{ resources_base_path }}/{{ item }}"
        state: directory
      with_items: "{{ resource_dirs }}"
      tags: paths

    - name: Clone the project repos from Git
      git:
        repo: "{{ item.repo }}"
        dest: "{{ projects_base_path }}/{{ item.name }}"
      with_items: "{{ git_repos }}"
      ignore_errors: true

    - name: Checkout the latest tagged version
      shell: "git checkout $(git describe --abbrev=0 --tags)"
      args:
        chdir: "{{ projects_base_path }}/{{ item.name }}"
      with_items: "{{ git_repos }}"

    - name: Check if Hanlon Microkernel file exists in /opt/autodeploy/resources/ISO
      stat:
        path: "{{ iso_path }}/{{ hnl_mk_image }}"
      register: hnl_mk
      tags: iso

    - name: Download the Hanlon microkernel image to /opt/autodeploy/resources/ISO
      get_url:
        url: "{{ hnl_mk_source }}{{ hnl_mk_image }}"
        dest: "{{ iso_path }}"
      when: not (hnl_mk.stat.exists)
      tags: iso

    - name: Check if RHEL DVD ISO file exists in /opt/autodeploy/resources/ISO
      stat:
        path: "{{ iso_path }}/{{ rhel_iso_image }}"
      register: rhel_iso
      tags: iso

# There two separate selenium downloads here because the authtoken on the link will time out
    - name: Find the RHEL DVD ISO file url
      selenium:
        url: "{{ rhel_download_url }}"
        username: "{{ rhn_user }}"
        password: "{{ rhn_pass }}"
        username_element_id: username
        password_element_id: password
        xpath: '//*[contains(@href,"{{ rhel_iso_image }}")]'
      register: rhel_get_url
      when: not (rhel_iso.stat.exists)
      tags: iso

    - name: Download the RHEL DVD ISO file to /opt/autodeploy/resources/ISO
      get_url:
        url: "{{ rhel_get_url.url }}"
        dest: "{{ iso_path }}"
      when: not (rhel_iso.stat.exists)
      tags: iso

    - name: Download the EPEL RPMs to /opt/autodeploy/resources/rpms when offline
      shell: repotrack $(cat {{ epel_rpm_file }}) -p {{ rpm_path }}
      when: offline
      tags: repo

    - name: Download the Red Hat RPMs to /opt/autodeploy/resources/rpms when offline
      shell:
        repotrack $(cat {{ rhn_rpm_file }}) -p {{ rpm_path }}
        -r rhel-7-server-extras-rpms
        -r rhel-7-server-openstack-6.0-rpms
        -r rhel-7-server-optional-rpms
        -r rhel-7-server-rpms
        -r rhel-ha-for-rhel-7-server-rpms
        -r rhel-server-rhscl-7-rpms
      when: offline
      tags: repo

    - name: Find Ansible RPM dependencies
      shell: yum deplist {{ item }} | grep provider | awk '{print $2}' | sort | uniq
      with_fileglob: ~/ansible/rpm-build/ansible-*.noarch.rpm
      register: ansible_deps
      when: offline
      tags: repo

    - name: Download the Ansible dependent RPMs when offline
      shell: repotrack "{{ item }}" -p "{{ rpm_path }}"
      with_items: "{{ ansible_deps.results[0].stdout_lines }}"
      when: offline
      tags: repo

    - name: Copy the Ansible RPM to /opt/autodeploy/resources/rpms when offline
      copy:
        src: "{{ item }}"
        dest: "{{ rpm_path }}"
      with_fileglob: ~/ansible/rpm-build/ansible-*.noarch.rpm
      when: offline
      tags: repo

    - name: Create the local repository in /opt/autodeploy/resources/rpms when offline
      command: createrepo "{{ rpm_path }}"
      when: offline
      tags: repo
