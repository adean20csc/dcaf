---
- name: install openvswitch plugin
  yum:
    pkg: "{{item}}"
    state: present
  tags: neutron
  with_items:
    - openstack-neutron

- name: configure the metadata_agent.ini file
  ini_file:
    dest: /etc/neutron/metadata_agent.ini
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  with_items:
    - { section: "DEFAULT", option: "verbose", value: "true"}
    - { section: "DEFAULT", option: "auth_strategy", value: "{{ neutron_auth_strategy }}"}
    - { section: "DEFAULT", option: "auth_url", value: "{{ keystone_private_protocol | default('http') }}://{{ keystone_private_vip | default('localhost') }}:{{ keystone_private_port | default (35357) }}/v2.0"}
    - { section: "DEFAULT", option: "auth_host", value: "{{ keystone_admin_vip | default('127.0.0.1') }}"}
    - { section: "DEFAULT", option: "auth_region", value: "{{ nova_region_name | default('regionOne') }}"}
    - { section: "DEFAULT", option: "admin_tenant_name", value: "services"}
    - { section: "DEFAULT", option: "admin_user", value: "neutron"}
    - { section: "DEFAULT", option: "admin_password", value: "{{ neutron_pass }}"}
    - { section: "DEFAULT", option: "nova_metadata_ip", value: "{{ nova_private_vip | default('127.0.0.1') }}"}
    - { section: "DEFAULT", option: "nova_metadata_port", value: "{{ nova_metadata_port | default (8775) }}"}
    - { section: "DEFAULT", option: "metadata_proxy_shared_secret", value: "{{ neutron_metadata_proxy_shared_secret }}"}
    - { section: "DEFAULT", option: "metadata_workers", value: "{{ neutron_metadata_workers }}"}
    - { section: "DEFAULT", option: "metadata_backlog", value: "{{ neutron_metadata_backlog }}"}
  tags: neutron

- name: configure the dhcp_agent.ini file
  ini_file:
    dest: /etc/neutron/dhcp_agent.ini
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  with_items:
    - { section: "DEFAULT", option: "verbose", value: "true"}
    - { section: "DEFAULT", option: "interface_driver", value: "neutron.agent.linux.interface.OVSInterfaceDriver"}
    - { section: "DEFAULT", option: "dhcp_delete_namespaces", value: "{{ neutron_dhcp_delete_namespaces }}"}
  tags: neutron

- name: configure the dhcp_agent.ini to set dhcp mtu for vm
  ini_file:
    dest: /etc/neutron/dhcp_agent.ini
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  with_items:
    - { section: "DEFAULT", option: "dnsmasq_config_file", value: "{{ neutron_dnsmasq_config_file  }}"}
  tags: neutron
  when: set_dns_mtu

- name: set dhcp mtu
  template:
    dest: "{{neutron_dnsmasq_config_file}}"
    src: dnsmasq_config.j2
  when: set_dns_mtu
  tags: neutron

- name: configure the l3_agent.ini file
  ini_file:
    dest: /etc/neutron/l3_agent.ini
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  with_items:
    - { section: "DEFAULT", option: "verbose", value: "true"}
    - { section: "DEFAULT", option: "interface_driver", value: "neutron.agent.linux.interface.OVSInterfaceDriver"}
    - { section: "DEFAULT", option: "handle_internal_only_routers", value: "{{ neutron_l3_handle_internal_only_routers }}"}
    - { section: "DEFAULT", option: "send_arp_for_ha", value: "{{ neutron_l3_send_arp_for_ha }}"}
    - { section: "DEFAULT", option: "router_delete_namespaces", value: "{{ neutron_l3_router_delete_namespaces }}"}
    - { section: "DEFAULT", option: "metadata_ip", value: "{{ nova_private_vip | default('127.0.0.1') }}"}
    - { section: "DEFAULT", option: "external_network_bridge", value: "{{ neutron_external_network_bridge }}"}
  tags: neutron

- name: configure the fwaas_driver.ini file
  ini_file:
    dest: /etc/neutron/fwaas_driver.ini
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  with_items:
    - { section: "DEFAULT", option: "verbose", value: "true"}
    - { section: "fwaas", option: "driver", value: "neutron.services.firewall.drivers.linux.iptables_fwaas.IptablesFwaasDriver"}
    - { section: "fwaas", option: "enabled", value: "true"}
  tags: neutron

- name: configure the lbaas_agent.ini file
  ini_file:
    dest: /etc/neutron/lbaas_agent.ini
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  with_items:
    - { section: "DEFAULT", option: "verbose", value: "true"}
    - { section: "DEFAULT", option: "interface_driver", value: "neutron.agent.linux.interface.OVSInterfaceDriver"}
    - { section: "DEFAULT", option: "device_driver", value: "neutron.services.loadbalancer.drivers.haproxy.namespace_driver.HaproxyNSDriver"}
  tags: neutron

- name: configure lbaas in neutron.conf when use_lbaas is true
  when: use_lbaas
  ini_file:
    dest: /etc/neutron/neutron.conf
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  with_items:
    - { section: "service_providers", option: "service_provider", value: "LOADBALANCER:Haproxy:neutron.services.loadbalancer.drivers.haproxy.plugin_driver.HaproxyOnHostPluginDriver:default" }
  tags: neutron

- name: enable neutron agents
  service:
    name: "{{ item }}"
    state: restarted
    enabled: yes
  with_items:
    - neutron-dhcp-agent
    - neutron-metadata-agent
    - neutron-l3-agent
  when: not use_pacemaker
  tags: neutron

- name: enable neutron lbaas services
  service:
    name: "{{ item }}"
    state: started
    enabled: yes
  with_items:
    - neutron-lbaas-agent
  run_once: true
  when: not use_pacemaker and use_lbaas
  tags: neutron

# commenting out pacemaker tasks
#- name: "[pacemaker] create pacemaker resource for neutron agents"
#  pcs_resource: command=create name={{ item.name }} type={{ item.type }} clone=yes interleave=yes
#  args:
#    operations:
#      - action: monitor
#        options:
#          start-delay: 10s
#  run_once: true
#  with_items:
#    - { name: 'neutron-dhcp-agent', type: 'systemd:neutron-dhcp-agent' }
#    - { name: 'neutron-l3-agent', type: 'systemd:neutron-l3-agent' }
#    - { name: 'neutron-metadata-agent', type: 'systemd:neutron-metadata-agent' }
#  when: use_pacemaker
#  tags: neutron
#
#- name: "[pacemaker] create pacemaker constraints for neutron"
#  shell: "pcs constraint list --full | grep id:{{ item.id }} || pcs constraint {{ item.cmd }}"
#  with_items:
#    - { id: order-neutron-openvswitch-agent-clone-neutron-dhcp-agent-clone, cmd: "order start neutron-openvswitch-agent-clone then neutron-dhcp-agent-clone" }
#    - { id: colocation-neutron-dhcp-agent-clone-neutron-openvswitch-agent-clone, cmd: "colocation add neutron-dhcp-agent-clone with neutron-openvswitch-agent-clone" }
#    - { id: order-neutron-dhcp-agent-clone-neutron-l3-agent-clone, cmd: "order start neutron-dhcp-agent-clone then neutron-l3-agent-clone" }
#    - { id: colocation-neutron-l3-agent-clone-neutron-dhcp-agent-clone, cmd: "colocation add neutron-l3-agent-clone with neutron-dhcp-agent-clone" }
#    - { id: order-neutron-l3-agent-clone-neutron-metadata-agent-clone, cmd: "order start neutron-l3-agent-clone then neutron-metadata-agent-clone" }
#    - { id: colocation-neutron-metadata-agent-clone-neutron-l3-agent-clone, cmd: "colocation add neutron-metadata-agent-clone with neutron-l3-agent-clone" }
#    - { id: order-neutron-server-clone-neutron-scale-clone, cmd: "order start neutron-server-clone then neutron-scale-clone" }
#  run_once: true
#  register: cmd
#  changed_when: "'{{ item.id }}' not in cmd.stdout"
#  when: use_pacemaker
#  tags: neutron
